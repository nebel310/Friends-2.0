// requests.js - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∞–º–∏ –≤ –¥—Ä—É–∑—å—è

const API_BASE = 'http://185.31.165.210:3001/api';

// –ó–∞–≥—Ä—É–∑–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö –∑–∞—è–≤–æ–∫
async function loadIncomingRequests() {
    try {
        const token = localStorage.getItem('token');
        const response = await fetch(`${API_BASE}/friends/requests/incoming`, {
            method: 'GET',
            headers: {
                'Authorization': `Bearer ${token}`,
                'Content-Type': 'application/json'
            }
        });

        if (response.ok) {
            const requests = await response.json();
            displayIncomingRequests(requests);
            updateIncomingCount(requests.length);
        } else {
            throw new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Ö–æ–¥—è—â–∏—Ö –∑–∞—è–≤–æ–∫');
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞:', error);
        showToast('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤—Ö–æ–¥—è—â–∏–µ –∑–∞—è–≤–∫–∏', 'error');
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ö–æ–¥—è—â–∏—Ö –∑–∞—è–≤–æ–∫
async function loadOutgoingRequests() {
    try {
        const token = localStorage.getItem('token');
        const response = await fetch(`${API_BASE}/friends/requests/outgoing`, {
            method: 'GET',
            headers: {
                'Authorization': `Bearer ${token}`,
                'Content-Type': 'application/json'
            }
        });

        if (response.ok) {
            const requests = await response.json();
            displayOutgoingRequests(requests);
            updateOutgoingCount(requests.length);
        } else {
            throw new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ö–æ–¥—è—â–∏—Ö –∑–∞—è–≤–æ–∫');
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞:', error);
        showToast('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏—Å—Ö–æ–¥—è—â–∏–µ –∑–∞—è–≤–∫–∏', 'error');
    }
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—Ö–æ–¥—è—â–∏—Ö –∑–∞—è–≤–æ–∫
function displayIncomingRequests(requests) {
    const container = document.getElementById('incomingRequestsList');
    
    if (!requests || requests.length === 0) {
        container.innerHTML = `
            <div class="empty-state-content">
                <div class="empty-icon-large">üì•</div>
                <h2 class="empty-title">–ù–µ—Ç –≤—Ö–æ–¥—è—â–∏—Ö –∑–∞—è–≤–æ–∫</h2>
                <p class="empty-description">–ö–æ–≥–¥–∞ –∫—Ç–æ-—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç –≤–∞–º –∑–∞—è–≤–∫—É –≤ –¥—Ä—É–∑—å—è, –æ–Ω–∞ –ø–æ—è–≤–∏—Ç—Å—è –∑–¥–µ—Å—å</p>
            </div>
        `;
        return;
    }

    container.innerHTML = requests.map(request => `
        <div class="request-card" data-request-id="${request.id}">
            <div class="request-header">
                <div class="request-user">
                    <div class="request-avatar">${request.sender?.username?.charAt(0).toUpperCase() || 'U'}</div>
                    <div class="request-info">
                        <h3>${request.sender?.username || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}</h3>
                        <p>${request.sender?.email || ''}</p>
                    </div>
                </div>
                <div class="request-date">${new Date(request.createdAt).toLocaleDateString()}</div>
            </div>
            <div class="request-actions">
                <button class="btn btn-success btn-small accept-request" data-request-id="${request.id}">
                    –ü—Ä–∏–Ω—è—Ç—å
                </button>
                <button class="btn btn-error btn-small reject-request" data-request-id="${request.id}">
                    –û—Ç–∫–ª–æ–Ω–∏—Ç—å
                </button>
            </div>
        </div>
    `).join('');

    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
    container.querySelectorAll('.accept-request').forEach(btn => {
        btn.addEventListener('click', handleAcceptRequest);
    });

    container.querySelectorAll('.reject-request').forEach(btn => {
        btn.addEventListener('click', handleRejectRequest);
    });
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏—Å—Ö–æ–¥—è—â–∏—Ö –∑–∞—è–≤–æ–∫
function displayOutgoingRequests(requests) {
    const container = document.getElementById('outgoingRequestsList');
    
    if (!requests || requests.length === 0) {
        container.innerHTML = `
            <div class="empty-state-content">
                <div class="empty-icon-large">üì§</div>
                <h2 class="empty-title">–ù–µ—Ç –∏—Å—Ö–æ–¥—è—â–∏—Ö –∑–∞—è–≤–æ–∫</h2>
                <p class="empty-description">–ó–∞—è–≤–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏, –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –∑–¥–µ—Å—å</p>
            </div>
        `;
        return;
    }

    container.innerHTML = requests.map(request => `
        <div class="request-card" data-request-id="${request.id}">
            <div class="request-header">
                <div class="request-user">
                    <div class="request-avatar">${request.receiver?.username?.charAt(0).toUpperCase() || 'U'}</div>
                    <div class="request-info">
                        <h3>${request.receiver?.username || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}</h3>
                        <p>${request.receiver?.email || ''}</p>
                    </div>
                </div>
                <div class="request-status">
                    <span class="pair-status status-pending">–û–∂–∏–¥–∞–Ω–∏–µ</span>
                </div>
            </div>
            <div class="request-date">–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${new Date(request.createdAt).toLocaleDateString()}</div>
            <div class="request-actions">
                <button class="btn btn-error btn-small cancel-request" data-request-id="${request.id}">
                    –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É
                </button>
            </div>
        </div>
    `).join('');

    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
    container.querySelectorAll('.cancel-request').forEach(btn => {
        btn.addEventListener('click', handleCancelRequest);
    });
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–æ–≤ –∑–∞—è–≤–æ–∫
function updateIncomingCount(count) {
    const badge = document.getElementById('incomingCount');
    if (count > 0) {
        badge.textContent = count;
        badge.style.display = 'flex';
    } else {
        badge.style.display = 'none';
    }
}

function updateOutgoingCount(count) {
    const badge = document.getElementById('outgoingCount');
    if (count > 0) {
        badge.textContent = count;
        badge.style.display = 'flex';
    } else {
        badge.style.display = 'none';
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è –∑–∞—è–≤–∫–∏
async function handleAcceptRequest(event) {
    const requestId = event.target.getAttribute('data-request-id');
    const card = event.target.closest('.request-card');
    
    try {
        card.classList.add('loading');
        event.target.disabled = true;

        const token = localStorage.getItem('token');
        const response = await fetch(`${API_BASE}/friends/requests/${requestId}/accept`, {
            method: 'POST',
            headers: {
                'Authorization': `Bearer ${token}`,
                'Content-Type': 'application/json'
            }
        });

        if (response.ok) {
            showToast('–ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞! –¢–µ–ø–µ—Ä—å –≤—ã –¥—Ä—É–∑—å—è', 'success');
            // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–∫–∏
            loadIncomingRequests();
            loadActivePairs();
        } else {
            const error = await response.json();
            throw new Error(error.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—è—Ç–∏–∏ –∑–∞—è–≤–∫–∏');
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞:', error);
        showToast(error.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–Ω—è—Ç—å –∑–∞—è–≤–∫—É', 'error');
    } finally {
        card.classList.remove('loading');
        event.target.disabled = false;
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏
async function handleRejectRequest(event) {
    const requestId = event.target.getAttribute('data-request-id');
    const card = event.target.closest('.request-card');
    
    try {
        card.classList.add('loading');
        event.target.disabled = true;

        const token = localStorage.getItem('token');
        const response = await fetch(`${API_BASE}/friends/requests/${requestId}/reject`, {
            method: 'POST',
            headers: {
                'Authorization': `Bearer ${token}`,
                'Content-Type': 'application/json'
            }
        });

        if (response.ok) {
            showToast('–ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞', 'info');
            // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫
            loadIncomingRequests();
        } else {
            const error = await response.json();
            throw new Error(error.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏');
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞:', error);
        showToast(error.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫–ª–æ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É', 'error');
    } finally {
        card.classList.remove('loading');
        event.target.disabled = false;
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã –∑–∞—è–≤–∫–∏
async function handleCancelRequest(event) {
    const requestId = event.target.getAttribute('data-request-id');
    const card = event.target.closest('.request-card');
    
    try {
        card.classList.add('loading');
        event.target.disabled = true;

        const token = localStorage.getItem('token');
        const response = await fetch(`${API_BASE}/friends/requests/${requestId}/cancel`, {
            method: 'DELETE',
            headers: {
                'Authorization': `Bearer ${token}`,
                'Content-Type': 'application/json'
            }
        });

        if (response.ok) {
            showToast('–ó–∞—è–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞', 'info');
            // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫
            loadOutgoingRequests();
        } else {
            const error = await response.json();
            throw new Error(error.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∑–∞—è–≤–∫–∏');
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞:', error);
        showToast(error.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É', 'error');
    } finally {
        card.classList.remove('loading');
        event.target.disabled = false;
    }
}

// –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥—è—â–∏—Ö –∑–∞—è–≤–æ–∫
function showIncomingRequests() {
    hideAllPages();
    document.getElementById('incomingContent').classList.add('active');
    loadIncomingRequests();
}

// –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏—Å—Ö–æ–¥—è—â–∏—Ö –∑–∞—è–≤–æ–∫
function showOutgoingRequests() {
    hideAllPages();
    document.getElementById('outgoingContent').classList.add('active');
    loadOutgoingRequests();
}

// –°–∫—Ä—ã—Ç—å –≤—Å–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
function hideAllPages() {
    document.querySelectorAll('.page-content').forEach(page => {
        page.classList.remove('active');
    });
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥—É–ª—è –∑–∞—è–≤–æ–∫
function initializeRequests() {
    // –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞—è–≤–æ–∫ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö —Å—Ç—Ä–∞–Ω–∏—Ü
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –≤ dashboard.js
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
window.requestsModule = {
    loadIncomingRequests,
    loadOutgoingRequests,
    showIncomingRequests,
    showOutgoingRequests
};