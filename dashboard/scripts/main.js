// app.js - –ü–æ–ª–Ω–æ—Å—Ç—å—é –ª–æ–∫–∞–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
class FriendsApp {
    constructor() {
        this.currentUser = {
            firstName: "–ò–≤–∞–Ω",
            username: "ivan_petrov",
            email: "ivan@example.com"
        };

        // –õ–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö
        this.data = {
            pairs: [
                {
                    id: 1,
                    friend: { username: "anna_smith", email: "anna@example.com" },
                    status: "active"
                },
                {
                    id: 2, 
                    friend: { username: "max_johnson", email: "max@example.com" },
                    status: "active"
                }
            ],
            incomingRequests: [
                {
                    id: 1,
                    sender: { username: "alex_brown", email: "alex@example.com" },
                    createdAt: new Date(Date.now() - 86400000).toISOString()
                },
                {
                    id: 2,
                    sender: { username: "sophia_wilson", email: "sophia@example.com" }, 
                    createdAt: new Date(Date.now() - 172800000).toISOString()
                }
            ],
            outgoingRequests: [
                {
                    id: 3,
                    receiver: { username: "mike_davis", email: "mike@example.com" },
                    createdAt: new Date(Date.now() - 43200000).toISOString()
                }
            ],
            archive: [
                {
                    id: 1,
                    user1: { username: "ivan_petrov" },
                    user2: { username: "anna_smith" },
                    title: "–°–æ–≤–º–µ—Å—Ç–Ω–æ–µ –∏–∑—É—á–µ–Ω–∏–µ React",
                    description: "–ó–∞–≤–µ—Ä—à–∏–ª–∏ –∏–∑—É—á–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–Ω—Ü–µ–ø—Ü–∏–π React –∑–∞ 2 –Ω–µ–¥–µ–ª–∏",
                    completedAt: new Date(Date.now() - 604800000).toISOString(),
                    points: 100
                },
                {
                    id: 2,
                    user1: { username: "max_johnson" },
                    user2: { username: "sophia_wilson" },
                    title: "–ü—Ä–æ–µ–∫—Ç Todo App", 
                    description: "–†–∞–∑—Ä–∞–±–æ—Ç–∞–ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏",
                    completedAt: new Date(Date.now() - 1209600000).toISOString(),
                    points: 150
                }
            ]
        };

        this.init();
    }

    init() {
        this.setupNavigation();
        this.setupEventListeners();
        this.loadDashboard();
        this.updateUserInfo();
        this.showToast('üöÄ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ! –í—Å—ë —Ä–∞–±–æ—Ç–∞–µ—Ç –ª–æ–∫–∞–ª—å–Ω–æ.', 'success');
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    updateUserInfo() {
        const userElements = document.querySelectorAll('#userName, #userNameArchive, #userNameIncoming, #userNameOutgoing');
        const avatarElements = document.querySelectorAll('#userAvatar, #userAvatarArchive, #userAvatarIncoming, #userAvatarOutgoing');
        
        userElements.forEach(el => el.textContent = this.currentUser.firstName);
        avatarElements.forEach(el => el.textContent = this.currentUser.firstName.charAt(0));
    }

    // –ù–∞–≤–∏–≥–∞—Ü–∏—è –º–µ–∂–¥—É —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º–∏
    setupNavigation() {
        const navItems = document.querySelectorAll('.nav-item[data-page]');
        
        navItems.forEach(item => {
            item.addEventListener('click', (e) => {
                e.preventDefault();
                
                // –£–±–∏—Ä–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–ª–∞—Å—Å—ã
                navItems.forEach(nav => nav.classList.remove('active'));
                item.classList.add('active');
                
                const page = item.getAttribute('data-page');
                this.showPage(page);
            });
        });
    }

    // –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É
    showPage(page) {
        // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        document.querySelectorAll('.page-content').forEach(p => p.classList.remove('active'));
        
        switch(page) {
            case 'dashboard':
                document.getElementById('dashboardContent').classList.add('active');
                this.loadDashboard();
                break;
            case 'archive':
                document.getElementById('archiveContent').classList.add('active');
                this.loadArchive();
                break;
            case 'incoming':
                document.getElementById('incomingContent').classList.add('active');
                this.loadIncomingRequests();
                break;
            case 'outgoing':
                document.getElementById('outgoingContent').classList.add('active');
                this.loadOutgoingRequests();
                break;
        }
    }

    // –ó–∞–≥—Ä—É–∑–∫–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    loadDashboard() {
        this.displayActivePairs();
        this.updateSidebarPairs();
    }

    // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–∞—Ä
    displayActivePairs() {
        const container = document.getElementById('activePairsContent');
        
        if (this.data.pairs.length === 0) {
            container.innerHTML = `
                <div class="empty-dashboard">
                    <div class="empty-icon-large">üë•</div>
                    <h2 class="empty-title">–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–∞—Ä</h2>
                    <p class="empty-description">–ù–∞—á–Ω–∏—Ç–µ –¥–æ–±–∞–≤–ª—è—Ç—å –¥—Ä—É–∑–µ–π, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞–≤–∞—Ç—å –ø–∞—Ä—ã –∏ –≤—ã–ø–æ–ª–Ω—è—Ç—å –∑–∞–¥–∞–Ω–∏—è –≤–º–µ—Å—Ç–µ</p>
                </div>
            `;
            return;
        }

        container.innerHTML = this.data.pairs.map(pair => `
            <div class="pair-card">
                <div class="pair-header">
                    <div class="pair-user">
                        <div class="pair-avatar">${pair.friend.username.charAt(0).toUpperCase()}</div>
                        <div class="pair-info">
                            <h3>${pair.friend.username}</h3>
                            <p>${pair.friend.email}</p>
                        </div>
                    </div>
                    <div class="pair-status status-active">–ê–∫—Ç–∏–≤–Ω–∞</div>
                </div>
                <div class="pair-actions">
                    <button class="btn btn-primary btn-small" onclick="app.openChat(${pair.id})">
                        üí¨ –ù–∞–ø–∏—Å–∞—Ç—å
                    </button>
                    <button class="btn btn-error btn-small" onclick="app.removePair(${pair.id})">
                        üóëÔ∏è –£–¥–∞–ª–∏—Ç—å
                    </button>
                </div>
            </div>
        `).join('');
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä –≤ —Å–∞–π–¥–±–∞—Ä–µ
    updateSidebarPairs() {
        const container = document.getElementById('activePairsList');
        
        if (this.data.pairs.length === 0) {
            container.innerHTML = `
                <div class="empty-state">
                    <div class="empty-icon">üë§</div>
                    <div class="empty-text">–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–∞—Ä</div>
                </div>
            `;
            return;
        }

        const displayedPairs = this.data.pairs.slice(0, 3);
        container.innerHTML = displayedPairs.map(pair => `
            <div class="nav-item">
                <div class="nav-icon">üë§</div>
                <span>${pair.friend.username}</span>
            </div>
        `).join('');

        if (this.data.pairs.length > 3) {
            container.innerHTML += `
                <div class="empty-state">
                    <div class="empty-text">–ò –µ—â–µ ${this.data.pairs.length - 3}</div>
                </div>
            `;
        }
    }

    // –ó–∞–≥—Ä—É–∑–∫–∞ –∞—Ä—Ö–∏–≤–∞
    loadArchive() {
        const container = document.getElementById('archiveFeed');
        
        if (this.data.archive.length === 0) {
            container.innerHTML = `
                <div class="empty-state-content">
                    <div class="empty-icon-large">üìä</div>
                    <h2 class="empty-title">–ê—Ä—Ö–∏–≤ –ø—É—Å—Ç</h2>
                    <p class="empty-description">
                        –ó–¥–µ—Å—å –±—É–¥—É—Ç –ø–æ—è–≤–ª—è—Ç—å—Å—è –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è –æ—Ç –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.<br>
                        –ö–æ–≥–¥–∞ –≤—ã –∏–ª–∏ –¥—Ä—É–≥–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∑–∞–≤–µ—Ä—à–∞—Ç –∑–∞–¥–∞–Ω–∏—è - –æ–Ω–∏ –ø–æ—è–≤—è—Ç—Å—è –∑–¥–µ—Å—å.
                    </p>
                </div>
            `;
            return;
        }

        container.innerHTML = this.data.archive.map(task => `
            <div class="archive-item">
                <div class="archive-header">
                    <div class="archive-users">
                        <span class="user-badge">${task.user1.username.charAt(0).toUpperCase()}</span>
                        <span>+</span>
                        <span class="user-badge">${task.user2.username.charAt(0).toUpperCase()}</span>
                        <span>${task.user1.username} –∏ ${task.user2.username}</span>
                    </div>
                    <div class="archive-date">${new Date(task.completedAt).toLocaleDateString()}</div>
                </div>
                <div class="archive-task">${task.title}</div>
                <div class="archive-description">${task.description}</div>
                <div class="archive-points">+${task.points} –æ—á–∫–æ–≤</div>
            </div>
        `).join('');
    }

    // –ó–∞–≥—Ä—É–∑–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö –∑–∞—è–≤–æ–∫
    loadIncomingRequests() {
        const container = document.getElementById('incomingRequestsList');
        this.updateIncomingCount();

        if (this.data.incomingRequests.length === 0) {
            container.innerHTML = `
                <div class="empty-state-content">
                    <div class="empty-icon-large">üì•</div>
                    <h2 class="empty-title">–ù–µ—Ç –≤—Ö–æ–¥—è—â–∏—Ö –∑–∞—è–≤–æ–∫</h2>
                    <p class="empty-description">–ö–æ–≥–¥–∞ –∫—Ç–æ-—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç –≤–∞–º –∑–∞—è–≤–∫—É –≤ –¥—Ä—É–∑—å—è, –æ–Ω–∞ –ø–æ—è–≤–∏—Ç—Å—è –∑–¥–µ—Å—å</p>
                </div>
            `;
            return;
        }

        container.innerHTML = this.data.incomingRequests.map(request => `
            <div class="request-card" data-request-id="${request.id}">
                <div class="request-header">
                    <div class="request-user">
                        <div class="request-avatar">${request.sender.username.charAt(0).toUpperCase()}</div>
                        <div class="request-info">
                            <h3>${request.sender.username}</h3>
                            <p>${request.sender.email}</p>
                        </div>
                    </div>
                    <div class="request-date">${new Date(request.createdAt).toLocaleDateString()}</div>
                </div>
                <div class="request-actions">
                    <button class="btn btn-success btn-small" onclick="app.acceptRequest(${request.id})">
                        –ü—Ä–∏–Ω—è—Ç—å
                    </button>
                    <button class="btn btn-error btn-small" onclick="app.rejectRequest(${request.id})">
                        –û—Ç–∫–ª–æ–Ω–∏—Ç—å
                    </button>
                </div>
            </div>
        `).join('');
    }

    // –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ö–æ–¥—è—â–∏—Ö –∑–∞—è–≤–æ–∫
    loadOutgoingRequests() {
        const container = document.getElementById('outgoingRequestsList');
        this.updateOutgoingCount();

        if (this.data.outgoingRequests.length === 0) {
            container.innerHTML = `
                <div class="empty-state-content">
                    <div class="empty-icon-large">üì§</div>
                    <h2 class="empty-title">–ù–µ—Ç –∏—Å—Ö–æ–¥—è—â–∏—Ö –∑–∞—è–≤–æ–∫</h2>
                    <p class="empty-description">–ó–∞—è–≤–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏, –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –∑–¥–µ—Å—å</p>
                </div>
            `;
            return;
        }

        container.innerHTML = this.data.outgoingRequests.map(request => `
            <div class="request-card" data-request-id="${request.id}">
                <div class="request-header">
                    <div class="request-user">
                        <div class="request-avatar">${request.receiver.username.charAt(0).toUpperCase()}</div>
                        <div class="request-info">
                            <h3>${request.receiver.username}</h3>
                            <p>${request.receiver.email}</p>
                        </div>
                    </div>
                    <div class="request-status">
                        <span class="pair-status status-pending">–û–∂–∏–¥–∞–Ω–∏–µ</span>
                    </div>
                </div>
                <div class="request-date">–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${new Date(request.createdAt).toLocaleDateString()}</div>
                <div class="request-actions">
                    <button class="btn btn-error btn-small" onclick="app.cancelRequest(${request.id})">
                        –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É
                    </button>
                </div>
            </div>
        `).join('');
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–æ–≤
    updateIncomingCount() {
        const badge = document.getElementById('incomingCount');
        if (this.data.incomingRequests.length > 0) {
            badge.textContent = this.data.incomingRequests.length;
            badge.style.display = 'flex';
        } else {
            badge.style.display = 'none';
        }
    }

    updateOutgoingCount() {
        const badge = document.getElementById('outgoingCount');
        if (this.data.outgoingRequests.length > 0) {
            badge.textContent = this.data.outgoingRequests.length;
            badge.style.display = 'flex';
        } else {
            badge.style.display = 'none';
        }
    }

    // –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞—è–≤–∫–∏ –≤ –¥—Ä—É–∑—å—è
    sendFriendRequest(username) {
        if (!username.trim()) {
            this.showToast('–í–≤–µ–¥–∏—Ç–µ username', 'error');
            return;
        }

        // –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
        const btn = document.querySelector('.add-friend-form .btn-primary');
        const originalText = btn.textContent;
        btn.textContent = '–û—Ç–ø—Ä–∞–≤–∫–∞...';
        btn.disabled = true;

        setTimeout(() => {
            const newRequest = {
                id: Date.now(),
                receiver: { 
                    username: username,
                    email: `${username}@example.com`
                },
                createdAt: new Date().toISOString()
            };

            this.data.outgoingRequests.push(newRequest);
            this.updateOutgoingCount();
            
            this.showToast(`–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${username}`, 'success');
            
            // –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞
            document.querySelector('.add-friend-input').value = '';
            
            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É
            btn.textContent = originalText;
            btn.disabled = false;

            // –ï—Å–ª–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –∏—Å—Ö–æ–¥—è—â–∏—Ö - –æ–±–Ω–æ–≤–ª—è–µ–º
            if (document.getElementById('outgoingContent').classList.contains('active')) {
                this.loadOutgoingRequests();
            }
        }, 1000);
    }

    // –ü—Ä–∏–Ω—è—Ç—å –∑–∞—è–≤–∫—É
    acceptRequest(requestId) {
        const request = this.data.incomingRequests.find(r => r.id === requestId);
        if (!request) return;

        // –î–æ–±–∞–≤–ª—è–µ–º –≤ –ø–∞—Ä—ã
        this.data.pairs.push({
            id: Date.now(),
            friend: request.sender,
            status: "active"
        });

        // –£–¥–∞–ª—è–µ–º –∏–∑ –≤—Ö–æ–¥—è—â–∏—Ö –∑–∞—è–≤–æ–∫
        this.data.incomingRequests = this.data.incomingRequests.filter(r => r.id !== requestId);
        
        this.showToast(`–¢–µ–ø–µ—Ä—å –≤—ã –¥—Ä—É–∑—å—è —Å ${request.sender.username}!`, 'success');
        this.loadIncomingRequests();
        this.loadDashboard();
    }

    // –û—Ç–∫–ª–æ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É
    rejectRequest(requestId) {
        const request = this.data.incomingRequests.find(r => r.id === requestId);
        if (!request) return;

        this.data.incomingRequests = this.data.incomingRequests.filter(r => r.id !== requestId);
        
        this.showToast(`–ó–∞—è–≤–∫–∞ –æ—Ç ${request.sender.username} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞`, 'info');
        this.loadIncomingRequests();
    }

    // –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É
    cancelRequest(requestId) {
        const request = this.data.outgoingRequests.find(r => r.id === requestId);
        if (!request) return;

        this.data.outgoingRequests = this.data.outgoingRequests.filter(r => r.id !== requestId);
        
        this.showToast(`–ó–∞—è–≤–∫–∞ –¥–ª—è ${request.receiver.username} –æ—Ç–º–µ–Ω–µ–Ω–∞`, 'info');
        this.loadOutgoingRequests();
    }

    // –£–¥–∞–ª–∏—Ç—å –ø–∞—Ä—É
    removePair(pairId) {
        if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É –ø–∞—Ä—É?')) {
            this.data.pairs = this.data.pairs.filter(p => p.id !== pairId);
            this.showToast('–ü–∞—Ä–∞ —É–¥–∞–ª–µ–Ω–∞', 'success');
            this.loadDashboard();
        }
    }

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
    setupEventListeners() {
        // –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞—è–≤–∫–∏
        const addFriendBtn = document.querySelector('.add-friend-form .btn-primary');
        const addFriendInput = document.querySelector('.add-friend-input');
        
        if (addFriendBtn && addFriendInput) {
            addFriendBtn.addEventListener('click', () => {
                this.sendFriendRequest(addFriendInput.value.trim());
            });
            
            addFriendInput.addEventListener('keypress', (e) => {
                if (e.key === 'Enter') {
                    this.sendFriendRequest(addFriendInput.value.trim());
                }
            });
        }

        // –í—ã—Ö–æ–¥
        document.getElementById('logoutBtn').addEventListener('click', (e) => {
            e.preventDefault();
            if (confirm('–í—ã–π—Ç–∏ –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è?')) {
                this.showToast('–î–æ –≤—Å—Ç—Ä–µ—á–∏!', 'info');
                // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã —Ä–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ –ª–æ–≥–∏–Ω
            }
        });
    }

    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
    openChat(pairId) {
        this.showToast('–§—É–Ω–∫—Ü–∏—è —á–∞—Ç–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ', 'info');
    }

    // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    showToast(message, type = 'info') {
        // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        let container = document.querySelector('.toast-container');
        if (!container) {
            container = document.createElement('div');
            container.className = 'toast-container';
            document.body.appendChild(container);
        }
        
        const toast = document.createElement('div');
        toast.className = `toast ${type}`;
        
        const icons = { success: '‚úÖ', error: '‚ùå', info: '‚ÑπÔ∏è' };
        
        toast.innerHTML = `
            <div class="toast-content">
                <span class="toast-icon">${icons[type]}</span>
                <span class="toast-message">${message}</span>
                <button class="toast-close">√ó</button>
            </div>
        `;
        
        container.appendChild(toast);
        
        // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è
        setTimeout(() => {
            toast.style.opacity = '1';
            toast.style.transform = 'translateX(0)';
        }, 10);
        
        // –ó–∞–∫—Ä—ã—Ç–∏–µ
        toast.querySelector('.toast-close').addEventListener('click', () => {
            this.closeToast(toast);
        });
        
        // –ê–≤—Ç–æ-–∑–∞–∫—Ä—ã—Ç–∏–µ
        setTimeout(() => {
            this.closeToast(toast);
        }, 5000);
    }

    closeToast(toast) {
        toast.style.opacity = '0';
        toast.style.transform = 'translateX(400px)';
        setTimeout(() => toast.remove(), 300);
    }
}

// –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
const app = new FriendsApp();