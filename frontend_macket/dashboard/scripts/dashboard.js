// dashboard.js - –û—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –¥–∞—à–±–æ—Ä–¥–∞
const API_BASE = 'http://185.31.165.210:3001/api';

// –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Å–µ—Ä–≤–µ—Ä–∞
async function getUserData() {
    try {
        const token = localStorage.getItem('token');
        
        if (!token) {
            window.location.href = 'login.html';
            return;
        }

        const response = await fetch(`${API_BASE}/auth/me`, {
            method: 'GET',
            headers: {
                'Authorization': `Bearer ${token}`,
                'Content-Type': 'application/json'
            }
        });

        if (response.ok) {
            const userData = await response.json();
            updateUserInterface(userData);
            return userData;
        } else if (response.status === 401) {
            localStorage.removeItem('token');
            window.location.href = 'login.html';
        } else {
            throw new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞:', error);
        document.getElementById('userName').textContent = '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏';
        document.getElementById('userAvatar').textContent = '!';
    }
}

// –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function updateUserInterface(userData) {
    const userElements = document.querySelectorAll('#userName, #userNameArchive, #userNameIncoming, #userNameOutgoing');
    const avatarElements = document.querySelectorAll('#userAvatar, #userAvatarArchive, #userAvatarIncoming, #userAvatarOutgoing');
    
    let displayName = '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
    let initial = '–ü';

    if (userData.firstName) {
        displayName = userData.firstName;
        initial = userData.firstName.charAt(0).toUpperCase();
    } else if (userData.username) {
        displayName = userData.username;
        initial = userData.username.charAt(0).toUpperCase();
    } else if (userData.email) {
        displayName = userData.email.split('@')[0];
        initial = userData.email.charAt(0).toUpperCase();
    }

    userElements.forEach(element => {
        element.textContent = displayName;
    });

    avatarElements.forEach(element => {
        element.textContent = initial;
    });
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–∞—Ä
async function loadActivePairs() {
    try {
        const token = localStorage.getItem('token');
        const response = await fetch(`${API_BASE}/friends/pairs`, {
            method: 'GET',
            headers: {
                'Authorization': `Bearer ${token}`,
                'Content-Type': 'application/json'
            }
        });

        if (response.ok) {
            const pairs = await response.json();
            displayActivePairs(pairs);
            updateSidebarPairs(pairs);
        } else {
            throw new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–∞—Ä');
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞:', error);
        showEmptyPairsState();
    }
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–∞—Ä –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –∫–æ–Ω—Ç–µ–Ω—Ç–µ
function displayActivePairs(pairs) {
    const container = document.getElementById('activePairsContent');
    
    if (!pairs || pairs.length === 0) {
        showEmptyPairsState();
        return;
    }

    container.innerHTML = pairs.map(pair => `
        <div class="pair-card">
            <div class="pair-header">
                <div class="pair-user">
                    <div class="pair-avatar">${pair.friend?.username?.charAt(0).toUpperCase() || '–î'}</div>
                    <div class="pair-info">
                        <h3>${pair.friend?.username || '–î—Ä—É–≥'}</h3>
                        <p>${pair.friend?.email || ''}</p>
                    </div>
                </div>
                <div class="pair-status status-active">–ê–∫—Ç–∏–≤–Ω–∞</div>
            </div>
            <div class="pair-actions">
                <button class="btn btn-primary btn-small" onclick="openChat(${pair.id})">
                    üí¨ –ù–∞–ø–∏—Å–∞—Ç—å
                </button>
                <button class="btn btn-error btn-small" onclick="removePair(${pair.id})">
                    üóëÔ∏è –£–¥–∞–ª–∏—Ç—å
                </button>
            </div>
        </div>
    `).join('');
}

// –ü–æ–∫–∞–∑–∞—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ "–Ω–µ—Ç –ø–∞—Ä"
function showEmptyPairsState() {
    const container = document.getElementById('activePairsContent');
    container.innerHTML = `
        <div class="empty-dashboard">
            <div class="empty-icon-large">üë•</div>
            <h2 class="empty-title">–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–∞—Ä</h2>
            <p class="empty-description">–ù–∞—á–Ω–∏—Ç–µ –¥–æ–±–∞–≤–ª—è—Ç—å –¥—Ä—É–∑–µ–π, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞–≤–∞—Ç—å –ø–∞—Ä—ã –∏ –≤—ã–ø–æ–ª–Ω—è—Ç—å –∑–∞–¥–∞–Ω–∏—è –≤–º–µ—Å—Ç–µ</p>
        </div>
    `;
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä –≤ —Å–∞–π–¥–±–∞—Ä–µ
function updateSidebarPairs(pairs) {
    const container = document.getElementById('activePairsList');
    
    if (!pairs || pairs.length === 0) {
        container.innerHTML = `
            <div class="empty-state">
                <div class="empty-icon">üë§</div>
                <div class="empty-text">–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–∞—Ä</div>
            </div>
        `;
        return;
    }

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 3 –ø–∞—Ä—ã –≤ —Å–∞–π–¥–±–∞—Ä–µ
    const displayedPairs = pairs.slice(0, 3);
    container.innerHTML = displayedPairs.map(pair => `
        <a href="#" class="nav-item pair-item" data-pair-id="${pair.id}">
            <div class="nav-icon">üë§</div>
            <span>${pair.friend?.username || '–î—Ä—É–≥'}</span>
        </a>
    `).join('');

    // –ï—Å–ª–∏ –ø–∞—Ä –±–æ–ª—å—à–µ 3, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º "–∏ –µ—â–µ X"
    if (pairs.length > 3) {
        container.innerHTML += `
            <div class="empty-state">
                <div class="empty-text">–ò –µ—â–µ ${pairs.length - 3}</div>
            </div>
        `;
    }
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
function setupNavigation() {
    const navItems = document.querySelectorAll('.nav-item[data-page]');
    
    navItems.forEach(item => {
        item.addEventListener('click', function(e) {
            e.preventDefault();
            
            const page = this.getAttribute('data-page');
            
            // –£–±–∏—Ä–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–ª–∞—Å—Å—ã —É –≤—Å–µ—Ö
            navItems.forEach(nav => nav.classList.remove('active'));
            
            // –î–æ–±–∞–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å —Ç–µ–∫—É—â–µ–º—É
            this.classList.add('active');
            
            // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            switch(page) {
                case 'dashboard':
                    showDashboard();
                    break;
                case 'archive':
                    showArchive();
                    break;
                case 'incoming':
                    showIncomingRequests();
                    break;
                case 'outgoing':
                    showOutgoingRequests();
                    break;
            }
        });
    });
}

// –ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
function showDashboard() {
    hideAllPages();
    document.getElementById('dashboardContent').classList.add('active');
    loadActivePairs();
}

// –§—É–Ω–∫—Ü–∏—è –≤—ã—Ö–æ–¥–∞
function setupLogout() {
    const logoutBtn = document.getElementById('logoutBtn');
    if (logoutBtn) {
        logoutBtn.addEventListener('click', function(e) {
            e.preventDefault();
            localStorage.removeItem('token');
            window.location.href = 'login.html';
        });
    }
}

// –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
function startDataRefresh() {
    // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
    setInterval(() => {
        loadActivePairs();
        if (window.requestsModule) {
            window.requestsModule.loadIncomingRequests();
            window.requestsModule.loadOutgoingRequests();
        }
    }, 30000);
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞—à–±–æ—Ä–¥–∞
async function initializeDashboard() {
    checkAuth();
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userData = await getUserData();
    
    if (userData) {
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é
        setupNavigation();
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≤—ã—Ö–æ–¥
        setupLogout();
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        showDashboard();
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        startDataRefresh();
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–æ–¥—É–ª—å –∑–∞—è–≤–æ–∫
        if (window.requestsModule) {
            window.requestsModule.initializeRequests();
        }
    }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ (–∑–∞–≥–ª—É—à–∫–∏ –¥–ª—è –¥–µ–º–æ)
function openChat(pairId) {
    showToast('–§—É–Ω–∫—Ü–∏—è —á–∞—Ç–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ', 'info');
}

function removePair(pairId) {
    if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É –ø–∞—Ä—É?')) {
        showToast('–ü–∞—Ä–∞ —É–¥–∞–ª–µ–Ω–∞', 'success');
        // –ó–¥–µ—Å—å –±—É–¥–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–π API –≤—ã–∑–æ–≤
        loadActivePairs(); // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–≥–¥–∞ DOM –∑–∞–≥—Ä—É–∂–µ–Ω
document.addEventListener('DOMContentLoaded', function() {
    initializeDashboard();
});

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
window.dashboardModule = {
    showDashboard,
    loadActivePairs,
    getUserData
};